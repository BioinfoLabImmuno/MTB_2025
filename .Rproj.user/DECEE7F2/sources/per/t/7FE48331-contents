---
title: "Variant Calling: Tutorial Completo"
author: ""
format:
  html:
    toc: true
    toc-depth: 3
    number-sections: true
    code-fold: false
execute:
  echo: true
  eval: true
  warning: false
  message: false
---

# Introduzione

Il *variant calling* è il processo di identificazione delle differenze tra un genoma di riferimento e i campioni sequenziati. Le differenze possono essere SNP (Single Nucleotide Polymorphisms), MNP (Multi-Nucleotide Polymorphisms) e piccole inserzioni/delezioni (indel).

## Obiettivi di apprendimento

- Eseguire variant calling (SNP e indel) con strumenti standard.
- Valutare la qualità/confidenza di una chiamata di variante.
- Filtrare varianti a bassa qualità/confidenza.
- Effettuare variant calling multi-campione.
- Visualizzare varianti con strumenti standard.
- Annotare varianti con conseguenze funzionali.

## Prerequisiti

Si assume che siano installati `samtools`, `bcftools` e `IGV`. Verifica rapida:

```bash
samtools --help
bcftools --help
igv
```

# 1. Esecuzione del Variant Calling

## 1.1 Dati e cartella di lavoro

Posizionarsi nella directory dei dati:

```bash
cd ~/course_data/variant_calling/data
pwd
```

Elencare i file disponibili:

```bash
ls -lh
```

Dovrebbero essere presenti due BAM (A_J.bam, NZO.bam) e il riferimento cromosoma 19 del topo (`GRCm38_68.19.fa`).

## 1.2 Controlli di qualità (facoltativo)

Esempi di comandi QC (già eseguiti nei materiali di corso):

```bash
samtools stats -r GRCm38_68.19.fa A_J.bam > A_J.stats
samtools stats -r GRCm38_68.19.fa NZO.bam > NZO.stats
plot-bamstats -r GRCm38_68.19.fa.gc -p A_J.graphs/ A_J.stats
plot-bamstats -r GRCm38_68.19.fa.gc -p NZO.graphs/ NZO.stats
```

## 1.3 Pileup con samtools

Il pileup elenca le basi lette allineate su ogni posizione del riferimento:

```bash
samtools mpileup -f GRCm38_68.19.fa A_J.bam | less -S
```

Note interpretative:
- Colonne principali: cromosoma, posizione, base di riferimento, profondità, basi lette, qualità.
- Simboli: `.`/`,` = match su strand forward/reverse; `ACGTN`/`acgtn` = mismatch; `^` inizio read; `$` fine read; `*` base deletata.

### Esercizi
- Trovare la profondità di lettura alla posizione `10001994` usando la ricerca in `less` (`/10001994`).
- Identificare alleli di riferimento e alternativo alla stessa posizione.
- Contare read che supportano riferimento vs alternativo a `10001994`.

## 1.4 Likelihood genotipiche e chiamata varianti

`bcftools mpileup` genera likelihood genotipiche (diverso da `samtools mpileup`).

```bash
bcftools mpileup -f GRCm38_68.19.fa A_J.bam | less -S
```

Tipicamente si streamma direttamente al caller:

```bash
bcftools mpileup -f GRCm38_68.19.fa A_J.bam | bcftools call -m | less -S
```

Per ottenere solo i siti varianti usare l'opzione appropriata di `bcftools call` (consultare l'help) e costruire il comando.

Aggiungiamo il tag `AD` (allele depths) e usiamo formato BCF non compresso in pipe per efficienza:

```bash
bcftools mpileup -a AD -f GRCm38_68.19.fa A_J.bam -Ou |   bcftools call -mv -o out.vcf
```

### Esercizi
- In `out.vcf`, qual è REF e ALT alla posizione `10001994`?
- Qual è la profondità grezza totale a `10001994`?
- Quanti read di alta qualità supportano REF e ALT (tag FORMAT/AD)?
- Che evento è presente alla posizione `10003649`?

# 2. Filtraggio delle Varianti

## 2.1 Estrazione rapida di informazioni

```bash
bcftools query --format 'POS=%POS\n' out.vcf | head
bcftools query -f'%POS %REF,%ALT\n' out.vcf | head
bcftools query -f'%POS %QUAL [%GT %AD] %REF %ALT\n' out.vcf | head
```

Filtraggio per qualità:

```bash
bcftools query -f'%POS %QUAL [%GT %AD] %REF %ALT\n' -i'QUAL>=30' out.vcf | head
```

Limitare ai soli SNP con qualità ≥ 30:

```bash
bcftools query -f'%POS %QUAL [%GT %AD] %REF %ALT\n' -i'QUAL>=30 && type="snp"' out.vcf | head
```

### Esercizi
- Stampare solo SNP con `QUAL > 30` e almeno `25` read alternativi nel tag `AD`.
  - Suggerimento: gli indici del tag AD sono zero-based, `AD[0]` = ref, `AD[1]` = alt; per campioni: `AD[sample:subfield]` o `AD[*:1]`.

## 2.2 Valutazione del callset con ts/tv

```bash
bcftools stats out.vcf | grep TSTV
bcftools stats out.vcf | grep TSTV | cut -f5
```

### Esercizi
- Calcolare ts/tv dopo filtro `-i 'QUAL>=30 && AD[*:1]>=25'`.
- Calcolare ts/tv dei siti rimossi con `-e` (atteso più basso).
- Dati inbred: ts/tv degli SNP eterozigoti con `-i 'GT="het"'`.

## 2.3 Soft-filter e normalizzazione

Applichiamo soft-filter e gap vicino a indel; generiamo il VCF filtrato:

```bash
bcftools filter -s LowQual -i'QUAL>=30 && AD[*:1]>=25' -g8 -G10 out.vcf -o out.flt.vcf
```

Normalizzazione (left-alignment) degli indel per rappresentazione coerente:

```bash
bcftools norm -f GRCm38_68.19.fa -o out.flt.norm.vcf out.flt.vcf
```

### Esercizio
- Verificare in output quante varianti indel sono state riallineate.

# 3. Variant Calling Multi-Campione

## 3.1 Chiamata con due BAM

```bash
ls *.bam
bcftools mpileup -f GRCm38_68.19.fa A_J.bam NZO.bam -Ou |   bcftools call -mv -Ob -o multi.bcf
bcftools index multi.bcf
```

Filtraggio coerente con la sezione precedente:

```bash
bcftools filter -s LowQual -i'QUAL>=30 && AD[*:1]>=25' -g8 -G10 multi.bcf -o multi.filt.bcf
bcftools index multi.filt.bcf
```

### Esercizi
- ts/tv del callset grezzo vs filtrato.
- ts/tv dei siti rimossi.

# 4. Visualizzazione con IGV

## 4.1 Caricamento del genoma di riferimento

In IGV: *Genomes → Load Genome From Server…* e selezionare “Mouse mm10” (sinonimo di GRCm38).

## 4.2 Caricamento dell’allineamento

*File → Load from File…* e selezionare `A_J.bam`.

## 4.3 Ispezione di varianti

- Navigare a `chr19:10,001,874-10,002,017` e ispezionare il SNP a `10001946`.
- Verificare supporto su strand forward (hover/click sulla barra di coverage).

Controllo corrispondenza nel BCF:

```bash
bcftools view -H -r chr19:10001946 multi.filt.bcf
```

Ripetere per `chr19:10072443`.

### Esercizi
- Il SNP a `10001946` è stato chiamato? Ha passato i filtri?
- Il SNP a `10072443` è reale? Motivare.

# 5. Annotazione delle Varianti

## 5.1 Annotazione con bcftools csq

Annotare solo i PASS:

```bash
bcftools view -i 'FILTER="PASS"' multi.filt.bcf |   bcftools csq -p m -f GRCm38_68.19.fa -g Mus_musculus.part.gff3.gz -Ob -o multi.filt.annot.bcf
bcftools index multi.filt.annot.bcf
```

Estrazione di conseguenze:

```bash
bcftools query -f '%CHROM\t%POS\t%REF\t%ALT\t%BCSQ\n' multi.filt.annot.bcf | head
```

### Esercizi
- Estrarre conseguenza e cambio aminoacidico a `19:10088937` con `bcftools query -f '%BCSQ'`.

# Conclusioni

Passaggi affrontati:
- Chiamata varianti con `samtools` e `bcftools`.
- Estrazione e filtraggio (incluso soft-filter) e normalizzazione degli indel.
- Chiamata multi-campione e valutazione con ts/tv.
- Visualizzazione in IGV.
- Annotazione funzionale con `bcftools csq`.

